allprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    def currentDir = System.getProperty("user.dir")

    if ((new File(currentDir)).getName() != rootProject.name) {
        throw new GradleException("You must change your current directory to the root project : '$rootProject.name'")
    }
}

evaluationDependsOnChildren()

subprojects {
    sourceSets {
        main {
            java {
                srcDirs 'src'
            }
            resources {
                srcDirs 'resources'
            }
        }
    }

    dependencies {
        implementation group: 'log4j', name: 'log4j', version: '1.2.17'
        implementation group: 'org.jdom', name: 'jdom2', version: '2.0.6'
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
        implementation group: 'org.ostermiller', name: 'utils', version: '1.07.00'
        implementation group: 'xerces', name: 'xercesImpl', version: '2.11.0'
        implementation group: 'tablelayout', name: 'TableLayout', version: '20050920'
        implementation group: 'org.codehaus.izpack', name: 'izpack-installer', version: '5.1.2'
        implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.8'
        implementation group: 'cglib', name: 'cglib', version: '3.2.6'

        implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre8'
        implementation group: 'net.sourceforge.jtds', name: 'jtds', version: '1.3.1'
        implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.2.3'
        implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.2'

        testImplementation 'junit:junit:4.11'
    }

    clean {
        delete "$rootDir/$appName/$pluginsDir/$project.name"
    }

    task compile(dependsOn: 'clean', type: JavaCompile) {
        source = sourceSets.main.java.srcDirs
        destinationDir = buildDir
        classpath = sourceSets.main.compileClasspath
    }

    if (project.name != 'opendbcopy') {
        dependencies {
            implementation project(':opendbcopy')
        }

        task createjar(dependsOn: 'compile', type: Jar) {
            archiveName "$appName-$project.name-${version}.jar"
            destinationDir file(libsDirName)
            from buildDir.name
            from sourceSets.main.java.srcDirs
            from sourceSets.main.resources.srcDirs
            exclude libsDirName
            exclude "tmp"
        }

        createjar.mustRunAfter compile

        task deploy(dependsOn: 'createjar') {
            doFirst {
                copy {
                    from pluginFile
                    from guiFile
                    into "$rootDir/$appName/$pluginsDir/$project.name"
                }

                if (project.name == 'opendbcopy.schemageneration') {
                    copy {
                        from "$projectDir/$hbmDir"
                        into "$rootDir/$appName/$pluginsDir/$project.name/$hbmDir"
                    }

                    copy {
                        from 'README'
                        into "$rootDir/$appName/$pluginsDir/$project.name"
                    }
                }
            }

            doLast {
                ant.move(file: libsDirName, tofile: "$rootDir/$appName/$pluginsDir/$project.name/$libsDirName")
            }
        }

        deploy.mustRunAfter createjar
    }
}